############################# CONECTION MYSQL
spring.datasource.url=jdbc:mysql://localhost:3306/miniautorizador?useTimezone=true&serverTimezone=UTC

#Utilizei as credencias, pois já havia uma imagem criada do mysql no meu docker com previlegios privados.
#spring.datasource.username=usermysql
#spring.datasource.password=123

server.port=8080

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

spring.mvc.pathmatch.matching-strategy=ant_path_matcher

############################# TOPICS KAFKA

CREATE_NEW_CARD=CREATE_NEW_CARD
CREATE_NEW_TRANSACTION=CREATE_NEW_TRANSACTION

############################# CONFIG KAFKA
#kafka local producer properties
spring.kafka.producer.bootstrap-servers=localhost:29092
spring.kafka.producer.client-id=card-producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.LongSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
#kafka local consumer properties
spring.kafka.consumer.bootstrap-servers=localhost:29092
spring.kafka.consumer.group-id=card-consumer
spring.kafka.consumer.auto-offset-reset=latest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
#kafka schema registry configs
spring.kafka.properties.schema.registry.url=http://0.0.0.0:8085
spring.kafka.properties.specific.avro.reader=true
auto.create.topics.enable=true
